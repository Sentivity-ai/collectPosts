#!/usr/bin/env python3

import requests
import json
from datetime import datetime

# Test configuration
API_BASE = "http://localhost:8000"

def test_hive_integration():
    """Test the Hive integration endpoints"""
    
    print("üß™ Testing Hive Integration...")
    print("=" * 50)
    
    # Test data
    test_posts = [
        {
            "source": "reddit",
            "title": "Breaking: Major political scandal revealed",
            "content": "A shocking new report has uncovered widespread corruption in the government. This could change everything we know about politics.",
            "author": "user123",
            "score": 1500,
            "url": "https://reddit.com/r/politics/123",
            "timestamp": "2025-08-22T10:00:00Z",
            "num_comments": 250,
            "upvote_ratio": 0.95
        },
        {
            "source": "quora",
            "title": "How AI is transforming the tech industry",
            "content": "Artificial intelligence is revolutionizing how we approach technology. Companies are investing billions in AI research.",
            "author": "tech_expert",
            "score": 800,
            "url": "https://quora.com/ai-transformation",
            "timestamp": "2025-08-22T09:30:00Z"
        },
        {
            "source": "instagram",
            "title": "Viral dance challenge takes over social media",
            "content": "This incredible dance move has gone viral across all platforms. Everyone is trying to replicate it!",
            "author": "dance_creator",
            "score": 5000,
            "url": "https://instagram.com/viral-dance",
            "timestamp": "2025-08-22T08:00:00Z"
        }
    ]
    
    try:
        # Test 1: Generate Hive CSV
        print("üìù Test 1: Generating Hive-ready CSV...")
        response = requests.post(
            f"{API_BASE}/hive/csv",
            json=test_posts,
            headers={"Content-Type": "application/json"}
        )
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ CSV generated: {data.get('csv_path', 'N/A')}")
            print(f"   Total posts: {data.get('total_posts', 0)}")
        else:
            print(f"‚ùå CSV generation failed: {response.status_code}")
            print(f"   Response: {response.text}")
        
        # Test 2: Get Hive summary
        print("\nüìä Test 2: Getting Hive summary...")
        response = requests.post(
            f"{API_BASE}/hive/summary",
            json=test_posts,
            headers={"Content-Type": "application/json"}
        )
        
        if response.status_code == 200:
            data = response.json()
            summary = data.get('summary', {})
            print(f"‚úÖ Summary generated:")
            print(f"   Total posts: {summary.get('total_posts', 0)}")
            print(f"   Avg engagement: {summary.get('avg_engagement', 'N/A')}")
            print(f"   Top topics: {list(summary.get('top_topics', {}).keys())[:3]}")
        else:
            print(f"‚ùå Summary generation failed: {response.status_code}")
            print(f"   Response: {response.text}")
        
        # Test 3: Full Hive processing
        print("\nüêù Test 3: Full Hive processing...")
        response = requests.post(
            f"{API_BASE}/hive/process",
            json={
                "posts": test_posts,
                "hive_repo": "sentivity/collectPosts",
                "generate_headlines": True,
                "upload_to_hf": False  # Skip upload for testing
            },
            headers={"Content-Type": "application/json"}
        )
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Hive processing completed:")
            print(f"   CSV path: {data.get('csv_path', 'N/A')}")
            print(f"   Total posts: {data.get('total_posts', 0)}")
            
            if 'summary' in data:
                summary = data['summary']
                print(f"   Viral potential: {summary.get('viral_potential', {})}")
                print(f"   Recommended angles: {summary.get('recommended_headline_angles', [])[:2]}")
        else:
            print(f"‚ùå Hive processing failed: {response.status_code}")
            print(f"   Response: {response.text}")
        
        print("\n" + "=" * 50)
        print("üéâ Hive integration tests completed!")
        
    except requests.exceptions.ConnectionError:
        print("‚ùå Connection error: Make sure the server is running on localhost:8000")
    except Exception as e:
        print(f"‚ùå Test failed with error: {str(e)}")

def test_csv_structure():
    """Test the CSV structure generated by Hive integration"""
    
    print("\nüìã Testing CSV Structure...")
    print("=" * 50)
    
    from hive_integration import HiveIntegration
    
    test_posts = [
        {
            "source": "reddit",
            "title": "Test post for CSV structure",
            "content": "This is a test post to verify the CSV structure includes all necessary fields for Hive processing.",
            "author": "test_user",
            "score": 100,
            "url": "https://test.com",
            "timestamp": "2025-08-22T10:00:00Z",
            "num_comments": 50,
            "upvote_ratio": 0.8
        }
    ]
    
    try:
        hive = HiveIntegration()
        csv_path = hive.create_headlines_csv(test_posts, "test_structure.csv")
        
        import pandas as pd
        df = pd.read_csv(csv_path)
        
        print("‚úÖ CSV structure test:")
        print(f"   File: {csv_path}")
        print(f"   Columns: {list(df.columns)}")
        print(f"   Rows: {len(df)}")
        
        # Check required columns
        required_columns = [
            'source', 'title', 'content', 'author', 'score', 'url', 'timestamp',
            'engagement_score', 'sentiment_keywords', 'topic_category', 'viral_potential'
        ]
        
        missing_columns = [col for col in required_columns if col not in df.columns]
        if missing_columns:
            print(f"‚ùå Missing columns: {missing_columns}")
        else:
            print("‚úÖ All required columns present")
        
        # Show sample data
        print("\nüìä Sample data:")
        print(df.head(1).to_string())
        
    except Exception as e:
        print(f"‚ùå CSV structure test failed: {str(e)}")

if __name__ == "__main__":
    test_hive_integration()
    test_csv_structure()
